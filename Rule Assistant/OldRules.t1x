<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE transfer PUBLIC "-//XMLmind//DTD transfer//EN" "transfer.dtd">
<transfer>
  <section-def-cats>
    <def-cat n="c_n">
      <cat-item tags="n" />
      <cat-item tags="n.*" />
    </def-cat>
    <def-cat n="c_xyz">
      <cat-item tags="XYZ"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <!--Part-of-speech tags used in the rules-->
    <def-attr n="a_gram_cat">
      <attr-item tags="n" />
    </def-attr>
    <def-attr n="a_n_number_slot">
      <attr-item tags="PL" />
      <attr-item tags="SG" />
    </def-attr>
    <def-attr n="a_n_case_slot">
      <attr-item tags="ACC" />
      <attr-item tags="GEN" />
      <attr-item tags="NOM" />
    </def-attr>
  </section-def-attrs>
  <section-def-vars>
    <!--Used by macro m_n_affix_from_n-->
    <def-var n="v_n_affix_from_n" />
  </section-def-vars>
  <section-def-macros>
    <def-macro n="m_n_affix_from_n" npar="1" c="FTM v_n_affix_from_n n n">
      <!--Item 1 is part-of-speech n.-->
      <!--Clear the variable to be sure we don't accidentally retain a prior value-->
      <let>
        <var n="v_n_affix_from_n" />
        <lit v="" />
      </let>
      <!--Narrow the set of possible values based on number (pl, sg).-->
      <choose>
        <!--Set v_n_affix_from_n based on number = pl.-->
        <when>
          <test>
            <equal>
              <clip pos="1" side="tl" part="a_n_number_slot" />
              <lit-tag v="PL" />
            </equal>
          </test>
          <!--Narrow the set of possible values based on case (acc, gen, nom) given number = pl.-->
          <choose>
            <!--Set v_n_affix_from_n based on case = acc.-->
            <when>
              <test>
                <equal>
                  <clip pos="1" side="tl" part="a_n_case_slot" />
                  <lit-tag v="ACC" />
                </equal>
              </test>
              <let>
                <var n="v_n_affix_from_n" />
                <lit-tag v="no-affix-for-pl-acc" />
              </let>
            </when>
            <!--Set v_n_affix_from_n based on case = gen.-->
            <when>
              <test>
                <equal>
                  <clip pos="1" side="tl" part="a_n_case_slot" />
                  <lit-tag v="GEN" />
                </equal>
              </test>
              <let>
                <var n="v_n_affix_from_n" />
                <lit-tag v="no-affix-for-pl-gen" />
              </let>
            </when>
            <otherwise>
              <!--Set v_n_affix_from_n based on case = nom.-->
              <let>
                <var n="v_n_affix_from_n" />
                <lit-tag v="PL" />
              </let>
            </otherwise>
          </choose>
        </when>
        <otherwise>
          <!--Set v_n_affix_from_n based on number = sg.-->
          <!--Narrow the set of possible values based on case (acc, gen, nom) given number = sg.-->
          <choose>
            <!--Set v_n_affix_from_n based on case = acc.-->
            <when>
              <test>
                <equal>
                  <clip pos="1" side="tl" part="a_n_case_slot" />
                  <lit-tag v="ACC" />
                </equal>
              </test>
              <let>
                <var n="v_n_affix_from_n" />
                <lit-tag v="no-affix-for-sg-acc" />
              </let>
            </when>
            <!--Set v_n_affix_from_n based on case = gen.-->
            <when>
              <test>
                <equal>
                  <clip pos="1" side="tl" part="a_n_case_slot" />
                  <lit-tag v="GEN" />
                </equal>
              </test>
              <let>
                <var n="v_n_affix_from_n" />
                <lit-tag v="GEN" />
              </let>
            </when>
            <otherwise>
              <!--Set v_n_affix_from_n based on case = nom.-->
              <let>
                <var n="v_n_affix_from_n" />
                <lit v="" />
              </let>
            </otherwise>
          </choose>
        </otherwise>
      </choose>
    </def-macro>
  </section-def-macros>
  <section-rules>
    <rule comment="potato">
      <pattern>
	<pattern-item n="c_xyz"/>
      </pattern>
      <action></action>
    </rule>
    <rule comment="def n simple (123)">
      <pattern>
        <pattern-item n="c_n" />
      </pattern>
      <action>
        <!--Generate and output n-->
        <!--Determine the appropriate affix for n and store it in a variable named v_n_affix_from_n.-->
        <call-macro n="m_n_affix_from_n">
          <with-param pos="1" />
        </call-macro>
        <out>
	  <!-- If this rule is kept or the new one comes after, we'll get ^POTATO<XYZ>$ in the output, which we definitely don't want. -->
	  <lu><lit v="POTATO"/><lit-tag v="XYZ"/></lu>
	  <b/>
          <lu>
            <clip pos="1" side="tl" part="lem" />
            <clip pos="1" side="tl" part="a_gram_cat" />
            <var n="v_n_affix_from_n" />
          </lu>
        </out>
      </action>
    </rule>
  </section-rules>
</transfer>

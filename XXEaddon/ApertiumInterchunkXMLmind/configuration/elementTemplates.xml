<?xml version="1.0" encoding="UTF-8"?>
<cfg:configuration name="Apertium Interchunk Rules Document" xmlns:xslt="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:cfg="http://www.xmlmind.com/xmleditor/schema/configuration">
  <!--
========================================
	 Element templates 
========================================
-->
  <cfg:elementTemplate name="and_equal_2">
    <and>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
    </and>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="and_equal_3">
    <and>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
    </and>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="append_clip">
    <append n="???">
      <clip pos="1" part="???"/>
    </append>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="new">
    <attr-item tags="aaa"/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="attribute">
    <def-attr n="a">
      <attr-item tags="aaa"/>
    </def-attr>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="attribute_2">
    <def-attr n="a">
      <attr-item tags="aaa"/>
      <attr-item tags="aaa"/>
    </def-attr>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="attribute_3">
    <def-attr n="a">
      <attr-item tags="aaa"/>
      <attr-item tags="aaa"/>
      <attr-item tags="aaa"/>
    </def-attr>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="begins-with_literal">
    <begins-with>
      <clip pos="1" part="???"/>
      <lit v="???"/>
    </begins-with>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="begins-with-list">
    <begins-with-list>
      <clip pos="1" part="???"/>
      <list n="???"/>
    </begins-with-list>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="blank_space">
    <b/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="call-macro_1">
    <call-macro n="m">
      <with-param pos="1"/>
    </call-macro>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="call-macro_2">
    <call-macro n="m">
      <with-param pos="1"/>
      <with-param pos="2"/>
    </call-macro>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="case-of">
    <case-of pos="1" part="lem"/>
  </cfg:elementTemplate>
  
  <cfg:elementTemplate name="category">
    <def-cat n="c">
      <cat-item tags="???"/>
    </def-cat>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="category_2">
    <def-cat n="c">
      <cat-item tags="???"/>
      <cat-item tags="???"/>
    </def-cat>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="category_3">
    <def-cat n="c">
      <cat-item tags="???"/>
      <cat-item tags="???"/>
      <cat-item tags="???"/>
    </def-cat>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="clip">
    <clip pos="1" part="whole"/>
  </cfg:elementTemplate>
  
  <cfg:elementTemplate name="choose_equal">
    <choose>
      <when>
        <test>
          <equal>
            <clip pos="1" part="???"/>
            <lit-tag v="???"/>
          </equal>
        </test>
      </when>
    </choose>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="chunk_lem">
    <chunk>
      <clip pos="1" part="lem"/>
      <clip pos="1" part="tags"/>
      <clip pos="1" part="???"/>
    </chunk>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="chunk_whole">
    <chunk>
      <clip pos="1" part="whole"/>
    </chunk>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="concat_2">
    <concat>
      <lit v="???"/>
      <lit v="???"/>
    </concat>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="contains-substring">
    <contains-substring>
      <clip pos="1" part="???"/>
      <lit v="???"/>
    </contains-substring>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="ends-with_literal">
    <ends-with>
      <clip pos="1" part="???"/>
      <lit v="???"/>
    </ends-with>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="ends-with-list">
    <ends-with-list>
      <clip pos="1" side="sl" part="???"/>
      <list n="???"/>
    </ends-with-list>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="equal_clip_lit">
    <equal>
      <clip pos="1" part="???"/>
      <lit v="???"/>
    </equal>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="equal_clip_lit-tag">
    <equal>
      <clip pos="1" part="???"/>
      <lit-tag v="???"/>
    </equal>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="in">
    <in>
      <clip pos="1" part="???"/>
      <list n="???"/>
    </in>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="let_var_clip">
    <let>
      <var n="v"/>
      <lit-tag v="???"/>
    </let>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="let_var_lit-tag">
    <let>
      <var n="v"/>
      <lit-tag v="???"/>
    </let>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="list">
    <def-list n="l">
      <list-item v="???"/>
    </def-list>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="list_2">
    <def-list n="l">
      <list-item v="???"/>
      <list-item v="???"/>
    </def-list>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="list_3">
    <def-list n="l">
      <list-item v="???"/>
      <list-item v="???"/>
      <list-item v="???"/>
    </def-list>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="literal_string">
    <lit v="???"/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="literal_tag">
    <lit-tag v="???"/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="macro_choose">
    <def-macro n="m" npar="0">
      <choose>
        <when>
          <test>
            <equal>
              <clip pos="1" part="???"/>
              <lit-tag v="???"/>
            </equal>
          </test>
        </when>
        <otherwise/>
      </choose>
    </def-macro>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="not_equal">
    <not>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
    </not>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="or_equal_2">
    <or>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
    </or>
  </cfg:elementTemplate>
  <cfg:elementTemplate name="or_equal_3">
    <or>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
      <equal>
        <clip pos="1" part="???"/>
        <lit-tag v="???"/>
      </equal>
    </or>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="otherwise_let">
    <otherwise>
      <let>
        <var n="v"/>
        <lit-tag v="???"/>
      </let>
    </otherwise>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="output_chunk">
    <out>
      <chunk>
        <clip pos="1" part="whole"/>
      </chunk>
    </out>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="rule">
    <rule comment="???">
      <pattern>
        <pattern-item n="c"/>
      </pattern>
      <action/>
    </rule>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="variable">
    <def-var n="v"/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="variable">
    <var n="???"/>
  </cfg:elementTemplate>

  <cfg:elementTemplate name="when_equal">
    <when>
      <test>
        <equal>
          <clip pos="1" part="???"/>
          <lit-tag v="???"/>
        </equal>
      </test>
    </when>
  </cfg:elementTemplate>

</cfg:configuration>
